package org.ericace.grpcserver;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.protobuf.services.ProtoReflectionService;
import org.ericace.globals.Globals;
import org.ericace.nbody.BodyMod;
import org.ericace.nbody.Configurables;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.ericace.globals.Globals.Color.*;

/**
 * Provides a gRPC server singleton on port 50051. Handles requests from external entities (e.g. the console)
 * and delegates them to the {@link Configurables} instance. This class was cloned from:
 *
 * https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/helloworld
 *
 * The class in turn references classes generated by the protobuf compiler. The gRPC interface is defined in
 * the {@code grpc} module
 */
public class NBodyServiceServer {
    private final Server server;
    private final Configurables configurables;
    private static final int PORT_NUM = 50051;
    private static NBodyServiceServer instance;

    /**
     * Creates an instance with a ref to the passed {@link Configurables}. The configurables instance
     * provides info about simulation configuration, and allows the gRPC server to modify sim configs
     *
     * @param configurables gets and sets simulation configuration params
     */
    private NBodyServiceServer(Configurables configurables) {
        this.configurables = configurables;
        server = ServerBuilder.forPort(PORT_NUM)
                .addService(new NBodyServiceServer.NBodyService())
                .addService(ProtoReflectionService.newInstance())
                .build();
    }

    /**
     * Calls the private constructor to instantiate the singleton, and then starts it
     *
     * @param configurables gets and sets simulation configuration params
     *
     * @throws IOException thrown by gRPC
     * @throws IllegalStateException if called twice
     */
    public static void start(Configurables configurables) throws IOException {
        if (instance != null) {
            throw new IllegalStateException("The start method can only be called once");
        }
        instance = new NBodyServiceServer(configurables);
        instance.start();
    }

    /**
     * Starts the gRPC server, and adds a JVM shutdown hook to stop the server thread when the JVM shuts down
     *
     * @throws IOException per the gRPC client libraries
     */
    private void start() throws IOException {
        server.start();
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                // Use stderr here since the logger may have been reset by its JVM shutdown hook.
                System.err.println("*** shutting down gRPC server since JVM is shutting down");
                NBodyServiceServer.stop();
                System.err.println("*** server shut down");
            }
        });
    }

    /**
     * Stops the gRPC server
     */
    public static void stop() {
        if (instance != null && instance.server != null) {
            instance.server.shutdown();
        }
    }

    /**
     * Waits for the gRPC server to stop
     */
    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    /**
     * Supports testing
     *
     * @param args per Java
     *
     * @throws IOException          per the grpc client libs
     * @throws InterruptedException per the grpc client libs
     */
    public static void main(String[] args) throws IOException, InterruptedException {
        final NBodyServiceServer server = new NBodyServiceServer(new dummyConfigurables());
        server.start();
        server.blockUntilShutdown();
    }

    /**
     * Provides the gRPC server implementation. The implementation is a facade for the instance
     * {@link NBodyServiceServer#configurables} field.
     */
    class NBodyService extends NBodyServiceGrpc.NBodyServiceImplBase {

        @Override
        public void setComputationThreads(org.ericace.grpcserver.ItemCount request,
                                          io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            configurables.setComputationThreads((int) request.getItemCount());
            ResultCode resultCode = ResultCode.newBuilder().setResultCode(ResultCode.ResultCodeEnum.OK).build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void setResultQueueSize(org.ericace.grpcserver.ItemCount request,
                                       io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            configurables.setResultQueueSize((int) request.getItemCount());
            ResultCode resultCode = ResultCode.newBuilder().setResultCode(ResultCode.ResultCodeEnum.OK).build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void setSmoothing(org.ericace.grpcserver.Factor request,
                                 io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            configurables.setSmoothing(request.getFactor());
            ResultCode resultCode = ResultCode.newBuilder().setResultCode(ResultCode.ResultCodeEnum.OK).build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void setRestitutionCoefficient(org.ericace.grpcserver.RestitutionCoefficient request,
                                 io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            configurables.setRestitutionCoefficient(request.getRestitutionCoefficient());
            ResultCode resultCode = ResultCode.newBuilder().setResultCode(ResultCode.ResultCodeEnum.OK).build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void getCurrentConfig(com.google.protobuf.Empty request,
                                     io.grpc.stub.StreamObserver<org.ericace.grpcserver.CurrentConfig> responseObserver) {
            CurrentConfig currentConfig = CurrentConfig.newBuilder()
                    .setBodies(configurables.getBodyCount())
                    .setComputationThreads(configurables.getComputationThreads())
                    .setResultQueueSize(configurables.getResultQueueSize())
                    .setSmoothingFactor(configurables.getSmoothing())
                    .setRestitutionCoefficient(configurables.getRestitutionCoefficient())
                    .build();
            responseObserver.onNext(currentConfig);
            responseObserver.onCompleted();
        }

        @Override
        public void removeBodies(org.ericace.grpcserver.ItemCount request,
                                 io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            configurables.removeBodies((int) request.getItemCount());
            ResultCode resultCode = ResultCode.newBuilder().setResultCode(ResultCode.ResultCodeEnum.OK).build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void addBody(org.ericace.grpcserver.BodyDescription request,
                            io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            float mass = request.getMass();
            float x = request.getX();
            float y = request.getY();
            float z = request.getZ();
            float vx = request.getVx();
            float vy = request.getVy();
            float vz = request.getVz();
            float radius = request.getRadius();
            boolean isSun = request.getIsSun();
            float fragFactor = request.getFragFactor();
            float fragStep = request.getFragStep();
            boolean withTelemetry = request.getWithTelemetry();
            String name = request.getName();
            String clas = request.getClass_();
            boolean pinned = request.getPinned();
            Globals.CollisionBehavior behavior = xlatCollisionBehavior(request.getCollisionBehavior());
            Globals.Color bodyColor = xlatColor(request.getBodyColor());

            int bodyID = configurables.addBody(mass, x, y, z, vx, vy, vz, radius, isSun, behavior, bodyColor,
                    fragFactor, fragStep, withTelemetry, name, clas, pinned);
            ResultCode resultCode = ResultCode.newBuilder()
                    .setResultCode(ResultCode.ResultCodeEnum.OK)
                    .setMessage(String.format("Added body ID: %d", bodyID))
                    .build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        @Override
        public void modBody(org.ericace.grpcserver.ModBodyMessage request,
                            io.grpc.stub.StreamObserver<org.ericace.grpcserver.ResultCode> responseObserver) {
            int bodyId = (int) request.getId();
            String bodyName = request.getName();
            String bodyClass = request.getClass_();
            List<BodyMod> bodyMods = new ArrayList<>();
            for (int i = 0; i < request.getPCount(); ++i) {
                String p = request.getP(i);
                BodyMod bodyMod = BodyMod.makeMod(p);
                if (bodyMod == null) {
                    ResultCode resultCode = ResultCode.newBuilder()
                            .setResultCode(ResultCode.ResultCodeEnum.ERROR)
                            .setMessage(String.format("Invalid mod parameter: %s", p))
                            .build();
                    responseObserver.onNext(resultCode);
                    responseObserver.onCompleted();
                }
                bodyMods.add(bodyMod);
            }
            Configurables.ModBodyResult modBodyResult = configurables.modBody(bodyId, bodyName, bodyClass, bodyMods);
            ResultCode resultCode = ResultCode.newBuilder()
                    .setResultCode(ResultCode.ResultCodeEnum.OK)
                    .setMessage(modBodyResult.getResult())
                    .build();
            responseObserver.onNext(resultCode);
            responseObserver.onCompleted();
        }

        private Globals.Color xlatColor(org.ericace.grpcserver.BodyColorEnum bodyColorEnum) {
            switch (bodyColorEnum.getNumber()) {
                case 1: return RANDOM;
                case 2: return BLACK;
                case 3: return WHITE;
                case 4: return DARKGRAY;
                case 5: return GRAY;
                case 6: return LIGHTGRAY;
                case 7: return RED;
                case 8: return GREEN;
                case 9: return BLUE;
                case 10: return YELLOW;
                case 11: return MAGENTA;
                case 12: return CYAN;
                case 13: return ORANGE;
                case 14: return BROWN;
                case 15: return PINK;
                case 0: default: return null;
            }
        }

        private Globals.CollisionBehavior xlatCollisionBehavior(
                org.ericace.grpcserver.CollisionBehaviorEnum behaviorEnum) {
            switch (behaviorEnum) {
                case NONE:
                    return Globals.CollisionBehavior.NONE;
                case SUBSUME:
                    return Globals.CollisionBehavior.SUBSUME;
                case FRAGMENT:
                    return Globals.CollisionBehavior.FRAGMENT;
                case ELASTIC:
                default:
                    return Globals.CollisionBehavior.ELASTIC;
            }
        }
    }

    /**
     * Supports limited testing of the gRPC server
     */
    private static class dummyConfigurables implements Configurables {
        @Override
        public void setResultQueueSize(int queueSize)  {}

        @Override
        public int getResultQueueSize() {
            return 100;
        }

        @Override
        public void setSmoothing(float smoothing)  {}

        @Override
        public float getSmoothing() {
            return 200;
        }

        @Override
        public void setComputationThreads(int threads)  {}

        @Override
        public int getComputationThreads() {
            return 300;
        }

        @Override
        public void setRestitutionCoefficient(float R)  {}

        @Override
        public float getRestitutionCoefficient() { return 1;}

        @Override
        public void removeBodies(int countToRemove)  {}

        @Override
        public int getBodyCount() {
            return 400;
        }

        @Override
        public int addBody(float mass, float x, float y, float z, float vx, float vy, float vz, float radius,
                           boolean isSun, Globals.CollisionBehavior behavior, Globals.Color bodyColor, float fragFactor,
                           float fragStep, boolean withTelemetry, String name, String clas, boolean pinned)  {return 0;}

        @Override
        public ModBodyResult modBody(int id, String bodyName, String bodyClass, List<BodyMod> bodyMods) {return null;}
    }
}
